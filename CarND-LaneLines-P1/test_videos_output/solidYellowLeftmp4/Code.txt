## P1: Finding lanes 
## Date: 3/30/19
## Author: Blaine W. (blaine-ww)
## SolidYellowLeft.mp4
 
import math
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"


import math
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"


def grayscale(img):
    """Applies the Grayscale transform
    This will return an image with only one color channel
    but NOTE: to see the returned image as grayscale
    (assuming your grayscaled image is called 'gray')
    you should call plt.imshow(gray, cmap='gray')"""
    return cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
    # Or use BGR2GRAY if you read an image with cv2.imread()
    # return cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    
def canny(img, low_threshold, high_threshold):
    """Applies the Canny transform"""
    return cv2.Canny(img, low_threshold, high_threshold)

def gaussian_blur(img, kernel_size):
    """Applies a Gaussian Noise kernel"""
    return cv2.GaussianBlur(img, (kernel_size, kernel_size), 0)

def region_of_interest(img, vertices):
    """
    Applies an image mask.
    
    Only keeps the region of the image defined by the polygon
    formed from `vertices`. The rest of the image is set to black.
    `vertices` should be a numpy array of integer points.
    """
    #defining a blank mask to start with
    mask = np.zeros_like(img)   
    
    #defining a 3 channel or 1 channel color to fill the mask with depending on the input image
    if len(img.shape) > 2:
        channel_count = img.shape[2]  # i.e. 3 or 4 depending on your image
        ignore_mask_color = (255,) * channel_count
    else:
        ignore_mask_color = 255
        
    #filling pixels inside the polygon defined by "vertices" with the fill color    
    cv2.fillPoly(mask, vertices, ignore_mask_color)
    
    #returning the image only where mask pixels are nonzero
    masked_image = cv2.bitwise_and(img, mask)
    return masked_image


def draw_lines(img, lines, color=[255, 0, 0], thickness=2):
    """
    NOTE: this is the function you might want to use as a starting point once you want to 
    average/extrapolate the line segments you detect to map out the full
    extent of the lane (going from the result shown in raw-lines-example.mp4
    to that shown in P1_example.mp4).  
    
    Think about things like separating line segments by their 
    slope ((y2-y1)/(x2-x1)) to decide which segments are part of the left
    line vs. the right line.  Then, you can average the position of each of 
    the lines and extrapolate to the top and bottom of the lane.
    
    This function draws `lines` with `color` and `thickness`.    
    Lines are drawn on the image inplace (mutates the image).
    If you want to make the lines semi-transparent, think about combining
    this function with the weighted_img() function below
    """
    
    # Take average
#     for line in lines:
#         for x1,y1,x2,y2 in line:
#             cv2.line(img, (x1, y1), (x2, y2), color, thickness)

    left_line=np.empty((0,4),dtype=np.uint8)
    right_line=np.empty((0,4),dtype=np.uint8) #np.array([])
#     right_line=np.array([])
    
    
    for line in lines:
        for x1,y1,x2,y2 in line:        
#             if not(math.isnan(x1) or math.isnan(x2) or math.isnan(y1) or math.isnan(y2)):
            #Separate line to left and right
            #note we ignore the slope=0 horizontal segments
            slope=(y2-y1)/(x2-x1)
            if slope<0.0:
                left_line=np.append(left_line,[[x1,y1, x2,y2]],axis=0)
            if slope>0.0:
                right_line=np.append(right_line,[[x1,y1, x2,y2]],axis=0)
                #right_line=np.insert(right_line,len(right_line),[[x1,y1, x2,y2]],axis=0)
      
    #Average slope/position
    #axis=0 means col aka mean of all x1, y1, x2, y2
    avg_left=np.mean(left_line,axis=0)
    avg_left_x1=avg_left[0]
    avg_left_y1=avg_left[1]
    avg_left_x2=avg_left[2]
    avg_left_y2=avg_left[3]

    avg_right=np.mean(right_line,axis=0)
    avg_right_x1=avg_right[0]
    avg_right_y1=avg_right[1]
    avg_right_x2=avg_right[2]
    avg_right_y2=avg_right[3]


#     avg_right_x1=right_line[:,0].mean() #this method works as well
#     avg_right_y1=right_line[:,1].mean() #
#     avg_right_x2=right_line[:,2].mean() #
#     avg_right_y2=right_line[:,3].mean() #


    #Default values
    imshape = img.shape
    y_bottom=imshape[0] #Yes both y coord for bottom pt is at the end of img
    apex_y=310

    #Store prior line values if you do not have enough qualified segments to draw a line
    #prev_left_slope=left_slope



    #Left-line is (-) slope
    left_slope=((avg_left_y2-avg_left_y1)/(avg_left_x2-avg_left_x1))
    #y=mx+b -> #b=y-mx
    left_y_intercept=avg_left_y1-left_slope*avg_left_x1

    #Since we alrdy know both y-ccoord of top and bottom pts
    #Extrapolate the x-values of top and bottom coordinates
    #y=mx+b -> x=(y-b)/m
    left_x_bottom=(y_bottom-left_y_intercept)/left_slope #left bottom pt is y=max vertical height which is imshape
    left_x_top=(apex_y-left_y_intercept)/left_slope #left top pt is apex

    #Draw left line
    if left_slope<0.0 and left_x_bottom<(imshape[1]/2) and left_x_top<(imshape[1]/2):
        cv2.line(img, (int(left_x_bottom), y_bottom), (int(left_x_top), apex_y), color, thickness)


    #Right-line is (+) slope
    right_slope=((avg_right_y2-avg_right_y1)/(avg_right_x2-avg_right_x1))
    #y=mx+b -> #b=y-mx
    right_y_intercept=avg_right_y2-right_slope*avg_right_x2

    #y=mx+b -> x=(y-b)/m
    right_x_bottom=(y_bottom-right_y_intercept)/right_slope #right bottom pt is y=max vertical height which is imshape
    right_x_top=(apex_y-right_y_intercept)/right_slope #left top pt is apex

    #Draw right line
    #Ensure right line is on the right portion of image
    if right_slope>0.0 and right_x_bottom>(imshape[1]/2) and right_x_top> (imshape[1]/2):
        cv2.line(img, (int(right_x_bottom), y_bottom), (int(right_x_top), apex_y), color, thickness)
   




def hough_lines(img, rho, theta, threshold, min_line_len, max_line_gap):
    """
    `img` should be the output of a Canny transform.
        
    Returns an image with hough lines drawn.
    """
    lines = cv2.HoughLinesP(img, rho, theta, threshold, np.array([]), minLineLength=min_line_len, maxLineGap=max_line_gap)
    line_img = np.zeros((img.shape[0], img.shape[1], 3), dtype=np.uint8)
    draw_lines(line_img, lines)
    return line_img

# Python 3 has support for cool math symbols.

def weighted_img(img, initial_img, a=0.8, ß=1., ?=0.):
    """
    `img` is the output of the hough_lines(), An image with lines drawn on it.
    Should be a blank image (all black) with lines drawn on it.
    
    `initial_img` should be the image before any processing.
    
    The result image is computed as follows:
    
    initial_img * a + img * ß + ?
    NOTE: initial_img and img must be the same shape!
    """
    return cv2.addWeighted(initial_img, a, img, ß, ?)


# TODO: Build your pipeline that will draw lane lines on the test_images
# then save them to the test_images_output directory.

from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"


def process_image(image):
    # NOTE: The output you return should be a color image (3 channel) for processing video below
    # TODO: put your pipeline here,
    # you should return the final output (image where lines are drawn on lanes)

 ## Grayscale the img
    # gray = cv2.cvtColor(image,cv2.COLOR_RGB2GRAY)
    gray = grayscale(image)
    # plt.imshow(gray)
    cv2.imwrite('test_videos_output/solidYellowLeft_gray.jpg',gray)

    ## Define a kernel size and apply Gaussian smoothing
    # blur_gray = cv2.GaussianBlur(gray,(kernel_size, kernel_size),0)
    kernel_size = 5
    blur_gray = gaussian_blur(gray, kernel_size)
    # plt.imshow(blur_gray)
    cv2.imwrite('test_videos_output/solidYellowLeft_blurGray.jpg',blur_gray)

    ## Define our parameters for Canny and apply
    # edges = cv2.Canny(blur_gray, low_threshold, high_threshold)
    low_threshold = 30
    high_threshold = 200
    edges = canny(blur_gray, low_threshold, high_threshold)
    # plt.imshow(edges)
    cv2.imwrite('test_videos_output/solidYellowLeft_edges.jpg',edges)

    ## Next we'll create a masked edges image using cv2.fillPoly()
    # mask = np.zeros_like(edges)

    ## This time we are defining a four sided polygon to mask
    # cv2.fillPoly(mask, vertices, ignore_mask_color)
    # masked_edges = cv2.bitwise_and(edges, mask)
    imshape = image.shape
    left_x=460
    right_x=520
    apex=305
    vertices = np.array([[(0,imshape[0]),(right_x, apex), (left_x,apex), (imshape[1],imshape[0])]], dtype=np.int32)
    masked_edges = region_of_interest(edges, vertices)
    # plt.imshow(masked_edges)
    cv2.imwrite('test_videos_output/solidYellowLeft_maskedEdges.jpg',masked_edges)

    ## Define the Hough transform parameters
    ## Make a blank the same size as our image to draw on
    rho = 2 # distance resolution in pixels of the Hough grid
    theta = np.pi/180*1 # angular resolution in radians of the Hough grid
    threshold = 50     # minimum number of votes (intersections in Hough grid cell)
    min_line_length = 10  #minimum number of pixels making up a line
    max_line_gap = 200    # maximum gap in pixels between connectable line segments
    # line_image = np.copy(image)*0 # creating a blank to draw lines on

    ## Run Hough on edge detected image
    ## Output "lines" is an array containing endpoints of detected line segments
    # lines = cv2.HoughLinesP(masked_edges, rho, theta, threshold, np.array([]),
    #                             min_line_length, max_line_gap)
    lines=hough_lines(masked_edges, rho, theta, threshold, min_line_length, max_line_gap)
    # plt.imshow(lines)
    cv2.imwrite('test_videos_output/solidYellowLeft_lines.jpg',cv2.cvtColor(lines, cv2.COLOR_RGB2BGR))

    ## Create a "color" binary image to combine with line image
    color_edges = np.dstack((edges, edges, edges)) 
    # plt.imshow(color_edges)
    # cv2.imwrite('test_images_output/solidWhiteCurve_c_edges_4.jpg',color_edges)

    ## Draw the lines on the edge image
    # lines_edges = cv2.addWeighted(color_edges, 0.8, line_image, 1, 0) 
    line_edges=weighted_img(lines, image, a=0.8, ß=1., ?=0.)
    # plt.imshow(image)
    plt.imshow(line_edges)

    ## Export _to the test_images_output directory
    # Warning requre cv2.cvtColor to convert color scale
    cv2.imwrite('test_videos_output/solidYellowLeft_done.jpg',cv2.cvtColor(line_edges, cv2.COLOR_RGB2BGR))
    
    result=line_edges
    
    return result